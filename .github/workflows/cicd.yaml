name: CI/CD

on: push

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Python dependencies
        run: make install

      - name: Check formatting
        run: make check-format

      - name: Check linting
        run: make check-lint

      - name: Check types
        run: make check-types

      - name: Start local infra
        run: make infra

      - name: Test
        run: make test

  build:
    name: Build image
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # TODO: checkout not necessary if using git context for build-push-action. any reason to keep?
      # - name: Checkout repository
      #   uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        run: echo noop
        # uses: docker/build-push-action@v5
        # with:
        #   # TODO: build args
        #   context: .
        #   file: ./Dockerfile
        #   tags: name/app:latest
        #   outputs: type=oci,dest=/tmp/image.tar
        #   # TODO: caching. ghcr?
        #   # TODO: can we add TTL to ghcr images?
        #   # TODO: when to push?
        #   push: false

      # - name: Build
      #   run: make build
      #   env:
      #     IMAGE: ...
      #     TAG: ...
      # TODO: may not be necessary if using ghcr above?
      - name: Save image
        run: echo noop
        # uses: actions/upload-artifact@v4
        #   # Name of the artifact to upload.
        #   # Optional. Default is 'artifact'
        #   name:

        #   # A file, directory or wildcard pattern that describes what to upload
        #   # Required.
        #   path:

        #   # The desired behavior if no files are found using the provided path.
        #   # Available Options:
        #   #   warn: Output a warning but do not fail the action
        #   #   error: Fail the action with an error message
        #   #   ignore: Do not output any warnings or errors, the action does not fail
        #   # Optional. Default is 'warn'
        #   if-no-files-found:

        #   # Duration after which artifact will expire in days. 0 means using default retention.
        #   # Minimum 1 day.
        #   # Maximum 90 days unless changed from the repository settings page.
        #   # Optional. Defaults to repository settings.
        #   retention-days:

        #   # The level of compression for Zlib to be applied to the artifact archive.
        #   # The value can range from 0 to 9.
        #   # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
        #   # Optional. Default is '6'
        #   compression-level:

        #   # If true, an artifact with a matching name will be deleted before a new one is uploaded.
        #   # If false, the action will fail if an artifact for the given name already exists.
        #   # Does not fail if the artifact does not exist.
        #   # Optional. Default is 'false'
        #   overwrite:

  push:
    name: Push image
    if: github.ref == 'refs/heads/main'
    needs: [test, build]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # TODO: copy from build
      # TODO: tool auth
      - name: Push
        run: echo noop

  deploy-staging:
    name: Deploy (staging)
    environment: staging
    if: github.ref == 'refs/heads/main'
    needs: [push]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # TODO: get artifact from GHCR, or artifact upload
      - name: Pull image
        run: echo noop

      - name: Set up gcloud
        run: echo noop

      - name: Set up kubectl
        run: echo noop

      - name: Set up docker
        run: echo noop

      - name: Set up terraform
        run: echo noop

      - name: Deploy
        run: echo noop

  deploy-production:
    name: Deploy (production)
    environment: production
    if: github.ref == 'refs/heads/main'
    needs: [push, deploy-staging]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # TODO: setup environment protection rules
      # TODO: copy from deploy-staging
      - name: Deploy
        run: echo noop
